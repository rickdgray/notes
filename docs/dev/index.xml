<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devs on Rick&#39;s Notes</title>
    <link>https://rickdgray.github.io/notes/dev/</link>
    <description>Recent content in Devs on Rick&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://rickdgray.github.io/notes/dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS</title>
      <link>https://rickdgray.github.io/notes/dev/aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/aws/</guid>
      <description>AWS CLI Credential fetching script Improvements to be made:
Use Write-Output instead as Write-Host cannot be piped to other processes if ((Get-Command -Name aws.exe | measure).Count -eq 0) { Write-Host &amp;#34;AWS CLI not installed.&amp;#34; Write-Host &amp;#34;Download and install from https://awscli.amazonaws.com/AWSCLIV2.msi&amp;#34; exit 1; } # Constants $configFile = &amp;#34;$env:USERPROFILE\.aws\config&amp;#34; $settingsFile = &amp;#34;$env:USERPROFILE\.aws\settings&amp;#34; $startUrl = &amp;#34;https://example.awsapps.com/start#&amp;#34; $AwsMyRoleId = &amp;#34;123456789000&amp;#34; $region = &amp;#34;us-east-1&amp;#34; $format = &amp;#34;json&amp;#34; $roleName = &amp;#34;MyRole&amp;#34; $grantType = &amp;#34;urn:ietf:params:oauth:grant-type:device_code&amp;#34; [datetime]$epoch = &amp;#39;1970-01-01 00:00:00&amp;#39; $profileContent = @&amp;#34; [default] sso_session = sso sso_account_id = $AwsMyRoleId sso_role_name = $roleName region = $region output = $format [sso-session sso] sso_start_url = $startUrl sso_region = $region sso_registration_scopes = sso:account:access &amp;#34;@ # Create the config file # This can also be done manually by running &amp;#34;aws configure sso&amp;#34; if (!</description>
    </item>
    
    <item>
      <title>C# Cheatsheet</title>
      <link>https://rickdgray.github.io/notes/dev/csharp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/csharp/</guid>
      <description>I&amp;rsquo;m tired of having to look up simple things that I can&amp;rsquo;t immediately remember.
Configuration Given this example appsettings.json
{ &amp;#34;Position&amp;#34;: { &amp;#34;Title&amp;#34;: &amp;#34;Editor&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;Joe Smith&amp;#34; } } Access in Program/Startup Accessing configuration info in builder
var test = builder.Configuration[&amp;#34;Position:Title&amp;#34;]; Console.Writeline(test); IOptions Pattern Matching class
public class PositionOptions { public const string Name = &amp;#34;Position&amp;#34;; public string Title { get; set; } = String.Empty; public string Name { get; set; } = String.</description>
    </item>
    
    <item>
      <title>C# For Newbies</title>
      <link>https://rickdgray.github.io/notes/dev/csharp-for-newbies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/csharp-for-newbies/</guid>
      <description>General Syntax Microsoft encourages the use of var. They&amp;rsquo;ve gone back and forth on this a few times, but I think they&amp;rsquo;ve settled on var for good now.
Know null conditional operators and the null coalescing operator too.
Classes are nullable by default; primitives are not. You can make primitives nullable using the ?.
bool? nullableBool; If you don&amp;rsquo;t want your classes to be nullable by default, you can set that option in the .</description>
    </item>
    
    <item>
      <title>Choose a License</title>
      <link>https://rickdgray.github.io/notes/dev/choose-a-license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/choose-a-license/</guid>
      <description>GPL My default choice. All derivatives must also have the same license! Prevents blatant theft of your work. MIT &amp;amp; BSD &amp;amp; ISC Go crazy; no rules Apache 2 Use the code commercially: Companies can include the licensed code in proprietary software that they then sell to customers. Alter the code: Developers are permitted to make modifications to the original code. Distribute any copies or modifications of the code: An individual or organization is allowed to copy and/or update the code, then make that version available to others (even commercially).</description>
    </item>
    
    <item>
      <title>Database</title>
      <link>https://rickdgray.github.io/notes/dev/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/database/</guid>
      <description>EF Migrations The migration tool has to be able to build the DbContext to know what&amp;rsquo;s in it.
dotnet add package Microsoft.EntityFrameworkCore.Design Add a new migration
param( [Parameter(Mandatory=$true)] [string] $MigrationName ) dotnet ef --startup-project ../App.Api/ migrations add $MigrationName Update database
param( [string] $TargetMigration ) # TODO print names of last 5 migrations to allow user to input if ([string]::IsNullOrEmpty($TargetMigration)) { dotnet ef --startup-project ../App.Api/ database update } else { dotnet ef --startup-project .</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://rickdgray.github.io/notes/dev/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/git/</guid>
      <description>Obsidian Setup git config --global --add safe.directory C:/Users/rickd/Source/Repos/Obsidian [!Windows-style backslashes will not work] If you run the above command by pasting the windows directory, you will need to edit the global .gitconfig file. It is in the user&amp;rsquo;s home directory. You can quickly open it with git config --global -e to fix the slashes.
Force GPG Login echo &amp;#34;test&amp;#34; | gpg --clearsign Gitflow To review: https://jeffkreeftmeijer.com/git-flow/ https://nvie.com/posts/a-successful-git-branching-model/
Common Commands Alias Command g git ga git add gaa git add &amp;ndash;all gapa git add &amp;ndash;patch gau git add &amp;ndash;update gav git add &amp;ndash;verbose gap git apply gapt git apply &amp;ndash;3way gb git branch gba git branch &amp;ndash;all gbd git branch &amp;ndash;delete gbda git branch &amp;ndash;no-color &amp;ndash;merged | grep -vE &amp;ldquo;^([+]|\s($(git_main_branch)|$(git_develop_branch))\s*$)&amp;rdquo; | xargs git branch &amp;ndash;delete 2&amp;gt;/dev/null gbD git branch &amp;ndash;delete &amp;ndash;force gbg git branch -vv gbgd local res=$(git branch -vv gbgD local res=$(git branch -vv gbl git blame -b -w gbnm git branch &amp;ndash;no-merged gbr git branch &amp;ndash;remote gbs git bisect gbsb git bisect bad gbsg git bisect good gbsr git bisect reset gbss git bisect start gc git commit &amp;ndash;verbose gc!</description>
    </item>
    
    <item>
      <title>HDD Testing</title>
      <link>https://rickdgray.github.io/notes/dev/hard-drive-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/hard-drive-testing/</guid>
      <description>THIS NEEDS FORMATTING
Introduction Don&amp;rsquo;t skip this section. It may be boring, but it will give you the background and reason why I say certain things later. This article is written for platter drives, although much, but not all, applies to the SSD drives too. There are surprisingly very few studies published on platter drive failures. Google did one, Backblaze has made several informative blog posts, and there was one published on usenix.</description>
    </item>
    
    <item>
      <title>Interviewing</title>
      <link>https://rickdgray.github.io/notes/dev/interviewing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/interviewing/</guid>
      <description>Questions for the Interviewer How do you feel the company rewards achievement? This is my favorite question because it seems to produce a different reaction every time, sometimes with them squirming uncomfortably. Some interviewers will give a generic bullshit answer: there are no rewards. This is OK at best, but if everything else is good including salary, I&amp;rsquo;ll move forward. Many interviewers are caught off guard because they don&amp;rsquo;t immediately have a great answer and have to think about it: there are no rewards, and also the interviewer sucks.</description>
    </item>
    
    <item>
      <title>Layoffs</title>
      <link>https://rickdgray.github.io/notes/dev/layoffs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/layoffs/</guid>
      <description>People who add value are generally safer than people who manage them. It&amp;rsquo;s always easier to, in the short term, fire managers without affecting the amount of work that gets done too much. Also, upper management postpones laying off the people that are the hardest to rehire as long as possible. An intern is easier to find than a good manager who is easier to find than a good staff level engineer.</description>
    </item>
    
    <item>
      <title>Networking</title>
      <link>https://rickdgray.github.io/notes/dev/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/networking/</guid>
      <description>Subnet Mask More info here
Addresses Hosts Netmask Amount of a Class C /30 4 2 255.255.255.252 /29 8 6 255.255.255.248 /28 16 14 255.255.255.240 /27 32 30 255.255.255.224 /26 64 62 255.255.255.192 /25 128 126 255.255.255.128 /24 256 254 255.255.255.0 /23 512 510 255.255.254.0 /22 1024 1022 255.255.252.0 /21 2048 2046 255.255.248.0 /20 4096 4094 255.255.240.0 /19 8192 8190 255.255.224.0 /18 16384 16382 255.255.192.0 /17 32768 32766 255.255.128.0 /16 65536 65534 255.</description>
    </item>
    
    <item>
      <title>New PC</title>
      <link>https://rickdgray.github.io/notes/dev/new-pc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/new-pc/</guid>
      <description> 7-zip git obsidian notepad++ ubuntu wsl paint.net sumatrapdf discord vlc vs vs code firefox obs steam office powershell </description>
    </item>
    
    <item>
      <title>Software Engineering</title>
      <link>https://rickdgray.github.io/notes/dev/software-engineering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/software-engineering/</guid>
      <description>The Mythical Man-Month The Mythical Man-Month Also known as Brooks&amp;rsquo;s law. Reasons why the man-month doesn&amp;rsquo;t work:
Ramp up time for a new employee pulls time away from existing developers. Communication overhead is combinatorially explosive Not all work is divisible; too many cooks; nine women can&amp;rsquo;t make a baby in one month Second-System Effect &amp;ldquo;The tendency of small, elegant, and successful systems to be succeeded by over-engineered, bloated systems, due to inflated expectations and overconfidence.</description>
    </item>
    
    <item>
      <title>SSL Certs</title>
      <link>https://rickdgray.github.io/notes/dev/ssl-certs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/ssl-certs/</guid>
      <description>Old script to generate certificate
#create ca key openssl genrsa -out ca.key 4096 #create ca openssl req -new -x509 -days 365 -key ca.key -out ca.cert.pem -config .\openssl-custom.cnf #create server key (private key) openssl genrsa -out server.key 4096 #create server certificate signing request (csr) openssl req -new -key server.key -out server.csr -config .\openssl-custom.cnf #create certificate (public key) openssl x509 -req -days 365 -in server.csr -CA ca.cert.pem -CAkey ca.key -CAcreateserial -out server.crt rm ca.</description>
    </item>
    
    <item>
      <title>System Admin</title>
      <link>https://rickdgray.github.io/notes/dev/system-admin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/system-admin/</guid>
      <description>NGINX Good default for security headers
# Security headersadd_header Strict-Transport-Security &amp;#34;max-age=31536000; includeSubDomains; preload&amp;#34; always;add_header Content-Security-Policy &amp;#39;frame-ancestors https://mywebapp.mywebsite.example&amp;#39;;add_header X-Content-Type-Options nosniff;add_header Content-Security-Policy &amp;#34;default-src &amp;#39;self&amp;#39; www.google-analytics.com ajax.googleapis.com www.google.com google.com gstatic.com www.gstatic.com connect.facebook.net facebook.com;&amp;#34;;add_header X-XSS-Protection &amp;#34;1; mode=block&amp;#34;;add_header Referrer-Policy &amp;#34;origin&amp;#34;; 413 Request Entity Too Large Allow large uploads; default is only 1MB
location /uploads {...client_max_body_size 100M;} Set Permissions Recursive sudo chown -R www-data:www-data ./* sudo find .</description>
    </item>
    
    <item>
      <title>Terminal</title>
      <link>https://rickdgray.github.io/notes/dev/terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rickdgray.github.io/notes/dev/terminal/</guid>
      <description>Windows Microsoft.PowerShell_profile.ps1 Import-Module posh-git oh-my-posh init pwsh --config &amp;#34;~/Documents/PowerShell/theme.omp.json&amp;#34; | Invoke-Expression function repos { &amp;amp; cd ~/source/repos } function edit { param ( $Filename ) &amp;amp; &amp;#34;C:/Program Files/Notepad++/notepad++.exe&amp;#34; $Filename } New-Alias which get-command clear Generate theme $alignment = &amp;#39;left&amp;#39; $textColorPrimary = &amp;#39;#ffffff&amp;#39; $textColorSecondary = &amp;#39;#ff0000&amp;#39; $style = &amp;#39;plain&amp;#39; $type = &amp;#39;prompt&amp;#39; $username = @{ &amp;#39;foreground&amp;#39; = $textColorPrimary &amp;#39;style&amp;#39; = $style &amp;#39;template&amp;#39; = &amp;#34;&amp;lt;$textColorSecondary&amp;gt;┏[&amp;lt;/&amp;gt;{{ .UserName }}&amp;lt;$textColorSecondary&amp;gt;]&amp;lt;/&amp;gt;&amp;#34; &amp;#39;type&amp;#39; = &amp;#39;session&amp;#39; } $git = @{ &amp;#39;foreground&amp;#39; = $textColorPrimary &amp;#39;style&amp;#39; = $style &amp;#39;template&amp;#39; = &amp;#34;&amp;lt;$textColorSecondary&amp;gt;[&amp;lt;/&amp;gt;{{ .</description>
    </item>
    
  </channel>
</rss>
